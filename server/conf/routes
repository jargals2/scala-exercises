# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#Sitemap
GET /sitemap.xml org.scalaexercises.exercises.controllers.SitemapController.sitemap

#Loader IO load testing verification
GET /loaderio-397122d360fee8afca6b77f62c4853ed/ org.scalaexercises.exercises.controllers.LoaderIOController.verificationToken

# Home page
GET / org.scalaexercises.exercises.controllers.ApplicationController.index

GET /users/:login org.scalaexercises.exercises.controllers.UserController.byLogin(login: String)

POST /exercises/sections/:libraryName/:sectionName/evaluate org.scalaexercises.exercises.controllers.ExercisesController.evaluate(libraryName: String, sectionName: String)


# Map static resources from the /public folder to the /assets URL path
GET /assets/*file controllers.Assets.at(path="/public", file)

# OAuth2
GET /_oauth-callback  org.scalaexercises.exercises.controllers.OAuthController.callback(code: Option[String], state: Option[String])
GET /_oauth-success   org.scalaexercises.exercises.controllers.OAuthController.success
GET /logout           org.scalaexercises.exercises.controllers.OAuthController.logout

# Client-side routing
GET /javascriptRoutes org.scalaexercises.exercises.controllers.ApplicationController.javascriptRoutes

# Exercises
GET /:libraryName               org.scalaexercises.exercises.controllers.ApplicationController.library(libraryName: String)
GET /:libraryName/:sectionName  org.scalaexercises.exercises.controllers.ApplicationController.section(libraryName: String, sectionName: String)

#User Progress
GET /progress/library/:libraryName/section/:sectionName org.scalaexercises.exercises.controllers.UserProgressController.fetchUserProgressBySection(libraryName: String, sectionName: String)

